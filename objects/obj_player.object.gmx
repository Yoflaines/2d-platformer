<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_dog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets up movement variables

grav = 0.09

move = 0
jump = 0

movespeed = 3
jumpspeed = 3

knockback = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creates pushable objects
/*
box = instance_create(688,672,obj_movable)
box.sprite_index = spr_moveble_box_big

box = instance_create(560,688,obj_movable)
box.sprite_index = spr_moveble_box_small
*/
/*
instance_create(1136,2064,obj_light_wall)

instance_create(1264,2064,obj_light_wall)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>knockback = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement animations 

if keyboard_check(ord("A")) &amp;&amp; keyboard_check(ord("D"))
{
    sprite_index = spr_player_dog;
    image_speed = 0;
}

else if keyboard_check(ord("D"))
{
    sprite_index = spr_player_dog_running;
    image_speed = 10/40;
    image_xscale = 1;
}
else if keyboard_check(ord("A"))

{
    sprite_index = spr_player_dog_running;
    image_speed = 10/40;
    image_xscale = -1;
}
else
{
    sprite_index = spr_player_dog;
}

if !place_meeting(x,y+2,obj_ground) &amp;&amp; !place_meeting(x,y+2,obj_movable)
{
    sprite_index = spr_player_dog_falling
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement and jumping

//horizontal
right = keyboard_check(ord("D"))
left = -keyboard_check(ord("A"))

//jump
jumping = max(keyboard_check_pressed(vk_space),keyboard_check_pressed(ord("W")),0)

//Move
if knockback == 0
{
    move = (left + right) * movespeed
}
if !place_meeting(x,y,obj_reverse_gravity)
{
    if jump &lt; 10
    {
        jump += grav; 
    }
}

if place_meeting(x,y+1,obj_ground)
{
    jump = jumping * -jumpspeed
}

if place_meeting(x,y+1,obj_movable)
{
    jump = jumping * -jumpspeed
}


//pushes pushable object
if (!jump)
{
    if place_meeting(x+sign(move),y,obj_movable)
    {
        movable = instance_place(x+sign(move),y,obj_movable);
        with (movable)
        if !place_meeting(x+sign(move),y,obj_ground) &amp;&amp; !place_meeting(x+sign(move),y,obj_movable) &amp;&amp; !place_meeting(x+sign(move),y,obj_light_wall)
        {
            x += sign(move);
            with (obj_player)
            {
                image_speed = 10 / 55;
                movespeed = 1;
            }
        }
    }
    else
    {
        movespeed = 3;
    }
}

//horizontal collision
if place_meeting(x+move,y,obj_ground)
{
    while(!place_meeting(x+sign(move),y,obj_ground))
    {
        x+= sign(move);
    }
    move = 0;
}

if place_meeting(x+move,y,obj_movable)
{
    while(!place_meeting(x+sign(move),y,obj_movable))
    {
        x+= sign(move);
    }
    move = 0;
}

//vertical collision
if place_meeting(x,y+jump,obj_ground)
{ 
    while(!place_meeting(x,y+jump,obj_ground))
    {
        y+= sign(jump);
    }
    jump = 0;
}

if place_meeting(x,y+jump,obj_movable)
{ 
    
    while(!place_meeting(x,y+jump,obj_movable))
    {
        y+= sign(jump);
    }
    jump = 0;
}

if place_meeting(x,y+jump,obj_light_wall_jump)
    {
    with obj_light_wall_jump
        {
        if sprite_index == spr_light_wall_jump_active
            { 
            with obj_player
                {
                    jump = -6;
                }
            } 
        }
    }
                    
with obj_light_wall_jump
    {
    if sprite_index == spr_light_wall_jump_active
        {
            with obj_player
            {
                if place_meeting(x+move,y,obj_light_wall_jump)
                {
                    while(!place_meeting(x+sign(move),y,obj_light_wall_jump))
                    {
                        x+= sign(move);
                    }
                    move = 0;
                }
            }
        }
    }

x += move;
y += jump;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback

//Knockback with enemies
if knockback == 0 &amp;&amp; place_meeting(x,y,obj_enemy1)
{
    knockback = 1 
    
    alarm[0] = room_speed/2
}

if knockback == 1
{
    /*
    push_dir = obj_enemy1.move
    
    move -= lengthdir_x(push_dir, push_dir);
    jump += lengthdir_y(0.1, 90);
    */
    enemy_dir = point_direction(obj_enemy1.x,obj_enemy1.y,x,y)
    
    knckbck = 0.4^0.4-0.4
    
    if enemy_dir &gt;= 270
    {
        move = movespeed
        jump += knckbck
    }
    else
    {
        move = -movespeed
        jump += knckbck
    }
}

show_debug_message(jump)
show_debug_message(move)

dir = point_direction(obj_enemy1.x,obj_enemy1.y,x,y)

show_debug_message(dir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
